package leivonta.test;
// Generated by ComTest BEGIN
import leivonta.*;
import java.util.*;
import java.io.File;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2019.04.26 11:12:20 // Generated by ComTest
 *
 */
@SuppressWarnings("all")
public class ReseptitTest {



  // Generated by ComTest BEGIN
  /** 
   * testReseptitIterator44 
   * @throws SailoException when error
   */
  @Test
  public void testReseptitIterator44() throws SailoException {    // Reseptit: 44
    Reseptit reseptit = new Reseptit(); 
    Resepti juustokakku = new Resepti(), juustokakku2 = new Resepti(); 
    juustokakku.rekisteroi(); juustokakku2.rekisteroi(); 
    reseptit.lisaa(juustokakku); 
    reseptit.lisaa(juustokakku2); 
    StringBuffer ids = new StringBuffer(30); 
    for (Resepti resepti: reseptit)
    ids.append(" "+ resepti.getTunnusNro()); 
    String tulos = " " + juustokakku.getTunnusNro() + " " + juustokakku2.getTunnusNro(); 
    assertEquals("From: Reseptit line: 61", tulos, ids.toString()); 
    ids = new StringBuffer(30); 
    for (Iterator<Resepti>  i=reseptit.iterator(); i.hasNext(); ) {
    Resepti resepti = i.next(); 
    ids.append(" "+ resepti.getTunnusNro()); 
    }
    assertEquals("From: Reseptit line: 69", tulos, ids.toString()); 
    Iterator<Resepti>  i=reseptit.iterator(); 
    assertEquals("From: Reseptit line: 72", true, i.next() == juustokakku); 
    assertEquals("From: Reseptit line: 73", true, i.next() == juustokakku2); 
    try {
    i.next(); 
    fail("Reseptit: 75 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLisaa128 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa128() throws SailoException {    // Reseptit: 128
    Reseptit reseptit = new Reseptit(); 
    Resepti juustokakku = new Resepti(); 
    Resepti juustokakku2 = new Resepti(); 
    assertEquals("From: Reseptit line: 133", 0, reseptit.getLkm()); 
    reseptit.lisaa(juustokakku); assertEquals("From: Reseptit line: 134", 1, reseptit.getLkm()); 
    reseptit.lisaa(juustokakku2); assertEquals("From: Reseptit line: 135", 2, reseptit.getLkm()); 
    reseptit.lisaa(juustokakku); assertEquals("From: Reseptit line: 136", 3, reseptit.getLkm()); 
    assertEquals("From: Reseptit line: 137", juustokakku, reseptit.anna(0)); 
    assertEquals("From: Reseptit line: 138", juustokakku2, reseptit.anna(1)); 
    assertEquals("From: Reseptit line: 139", juustokakku, reseptit.anna(2)); 
    assertEquals("From: Reseptit line: 140", false, reseptit.anna(1) == juustokakku); 
    assertEquals("From: Reseptit line: 141", true, reseptit.anna(1) == juustokakku2); 
    try {
    assertEquals("From: Reseptit line: 142", juustokakku, reseptit.anna(3)); 
    fail("Reseptit: 142 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    reseptit.lisaa(juustokakku); assertEquals("From: Reseptit line: 143", 4, reseptit.getLkm()); 
    reseptit.lisaa(juustokakku); assertEquals("From: Reseptit line: 144", 5, reseptit.getLkm()); 
    reseptit.lisaa(juustokakku); assertEquals("From: Reseptit line: 145", 6, reseptit.getLkm()); 
    reseptit.lisaa(juustokakku); assertEquals("From: Reseptit line: 146", 7, reseptit.getLkm()); 
    reseptit.lisaa(juustokakku); assertEquals("From: Reseptit line: 147", 8, reseptit.getLkm()); 
    reseptit.lisaa(juustokakku); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta175 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta175() throws SailoException {    // Reseptit: 175
    Reseptit reseptit = new Reseptit(); 
    Resepti juustokakku = new Resepti(); 
    Resepti juustokakku2 = new Resepti(); 
    juustokakku.vastaaJuustokakku(); juustokakku2.vastaaJuustokakku(); 
    String hakemisto = "testileivonta"; 
    String tiedNimi = hakemisto+"/reseptit"; 
    File ftied = new File(tiedNimi+".dat"); 
    File dir = new File(hakemisto); 
    dir.mkdir(); 
    ftied.delete(); 
    try {
    reseptit.lueTiedostosta(tiedNimi); 
    fail("Reseptit: 191 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    reseptit.lisaa(juustokakku); 
    reseptit.lisaa(juustokakku2); 
    reseptit.tallenna(); 
    reseptit = new Reseptit(); 
    reseptit.lueTiedostosta(tiedNimi); 
    Iterator<Resepti> i = reseptit.iterator(); 
    assertEquals("From: Reseptit line: 198", juustokakku, i.next()); 
    assertEquals("From: Reseptit line: 199", juustokakku2, i.next()); 
    assertEquals("From: Reseptit line: 200", false, i.hasNext()); 
    reseptit.lisaa(juustokakku2); 
    reseptit.tallenna(); 
    assertEquals("From: Reseptit line: 203", true, ftied.delete()); 
    File fbak = new File(tiedNimi+".bak"); 
    assertEquals("From: Reseptit line: 205", true, fbak.delete()); 
    assertEquals("From: Reseptit line: 206", true, dir.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsi264 
   * @throws SailoException when error
   */
  @Test
  public void testEtsi264() throws SailoException {    // Reseptit: 264
    Reseptit reseptit = new Reseptit(); 
    Resepti resepti1 = new Resepti(); resepti1.parse("1|Juustokakku|juustokakut||"); 
    Resepti resepti2 = new Resepti(); resepti2.parse("2|Korvapuustit|pullat||"); 
    Resepti resepti3 = new Resepti(); resepti3.parse("4|Prinsessakakku|t채ytekakut|Syntym채p채iv채t|"); 
    reseptit.lisaa(resepti1); reseptit.lisaa(resepti2); reseptit.lisaa(resepti3); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa340 
   * @throws SailoException when error
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testKorvaaTaiLisaa340() throws SailoException,CloneNotSupportedException {    // Reseptit: 340
    Reseptit reseptit = new Reseptit(); 
    Resepti juustokakku = new Resepti(), juustokakku2 = new Resepti(); 
    juustokakku.rekisteroi(); juustokakku2.rekisteroi(); 
    assertEquals("From: Reseptit line: 346", 0, reseptit.getLkm()); 
    reseptit.korvaaTaiLisaa(juustokakku); assertEquals("From: Reseptit line: 347", 1, reseptit.getLkm()); 
    reseptit.korvaaTaiLisaa(juustokakku2); assertEquals("From: Reseptit line: 348", 2, reseptit.getLkm()); 
    Resepti juustokakku3 = juustokakku.clone(); 
    Iterator<Resepti> it = reseptit.iterator(); 
    assertEquals("From: Reseptit line: 351", true, it.next() == juustokakku); 
    reseptit.korvaaTaiLisaa(juustokakku3); assertEquals("From: Reseptit line: 352", 2, reseptit.getLkm()); 
    it = reseptit.iterator(); 
    Resepti r0 = it.next(); 
    assertEquals("From: Reseptit line: 355", juustokakku3, r0); 
    assertEquals("From: Reseptit line: 356", true, r0 == juustokakku3); 
    assertEquals("From: Reseptit line: 357", false, r0 == juustokakku); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista377 
   * @throws SailoException when error
   */
  @Test
  public void testPoista377() throws SailoException {    // Reseptit: 377
    Reseptit reseptit = new Reseptit(); 
    Resepti juustokakku = new Resepti(), juustokakku2 = new Resepti(), juustokakku3 = new Resepti(); 
    juustokakku.rekisteroi(); juustokakku2.rekisteroi(); juustokakku3.rekisteroi(); 
    int id1 = juustokakku.getTunnusNro(); 
    reseptit.lisaa(juustokakku); reseptit.lisaa(juustokakku2); reseptit.lisaa(juustokakku3); 
    assertEquals("From: Reseptit line: 384", 1, reseptit.poista(id1+1)); 
    assertEquals("From: Reseptit line: 385", null, reseptit.annaId(id1+1)); assertEquals("From: Reseptit line: 385", 2, reseptit.getLkm()); 
    assertEquals("From: Reseptit line: 386", 1, reseptit.poista(id1)); assertEquals("From: Reseptit line: 386", 1, reseptit.getLkm()); 
    assertEquals("From: Reseptit line: 387", 0, reseptit.poista(id1+3)); assertEquals("From: Reseptit line: 387", 1, reseptit.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testAnnaId406 
   * @throws SailoException when error
   */
  @Test
  public void testAnnaId406() throws SailoException {    // Reseptit: 406
    Reseptit reseptit = new Reseptit(); 
    Resepti juustokakku = new Resepti(), juustokakku2 = new Resepti(), juustokakku3 = new Resepti(); 
    juustokakku.rekisteroi(); juustokakku2.rekisteroi(); juustokakku3.rekisteroi(); 
    int id1 = juustokakku.getTunnusNro(); 
    reseptit.lisaa(juustokakku); reseptit.lisaa(juustokakku2); reseptit.lisaa(juustokakku3); 
    assertEquals("From: Reseptit line: 413", true, reseptit.annaId(id1) == juustokakku); 
    assertEquals("From: Reseptit line: 414", true, reseptit.annaId(id1+1) == juustokakku2); 
    assertEquals("From: Reseptit line: 415", true, reseptit.annaId(id1+2) == juustokakku3); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsiId429 
   * @throws SailoException when error
   */
  @Test
  public void testEtsiId429() throws SailoException {    // Reseptit: 429
    Reseptit reseptit = new Reseptit(); 
    Resepti juustokakku = new Resepti(), juustokakku2 = new Resepti(), juustokakku3 = new Resepti(); 
    juustokakku.rekisteroi(); juustokakku2.rekisteroi(); juustokakku3.rekisteroi(); 
    int id1 = juustokakku.getTunnusNro(); 
    reseptit.lisaa(juustokakku); reseptit.lisaa(juustokakku2); reseptit.lisaa(juustokakku3); 
    assertEquals("From: Reseptit line: 436", 1, reseptit.etsiId(id1+1)); 
    assertEquals("From: Reseptit line: 437", 2, reseptit.etsiId(id1+2)); 
  } // Generated by ComTest END
}