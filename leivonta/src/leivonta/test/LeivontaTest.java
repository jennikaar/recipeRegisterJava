package leivonta.test;
// Generated by ComTest BEGIN
import leivonta.SailoException;
import java.io.*;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
import leivonta.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2019.04.26 11:12:20 // Generated by ComTest
 *
 */
@SuppressWarnings("all")
public class LeivontaTest {


  // Generated by ComTest BEGIN  // Leivonta: 14
   private Leivonta leivonta; 
   private Resepti juustokakku; 
   private Resepti juustokakku2; 
   private int rid1; 
   private int rid2; 
   private Ohje ohje1; 
   private Ohje ohje2; 
   private Ohje ohje3; 
   private Ohje ohje4; 
   private Ohje ohje5; 

   public void alustaLeivonta() {
     leivonta = new Leivonta(); 
     juustokakku = new Resepti(); juustokakku.vastaaJuustokakku(); juustokakku.rekisteroi(); 
     juustokakku2 = new Resepti(); juustokakku2.vastaaJuustokakku(); juustokakku2.rekisteroi(); 
     rid1 = juustokakku.getTunnusNro(); 
     rid2 = juustokakku2.getTunnusNro(); 
     ohje1 = new Ohje(rid2); ohje1.vastaaPerinteinen(rid2); 
     ohje2 = new Ohje(rid1); ohje2.vastaaPerinteinen(rid1); 
     ohje3 = new Ohje(rid2); ohje3.vastaaPerinteinen(rid2); 
     ohje4 = new Ohje(rid1); ohje4.vastaaPerinteinen(rid1); 
     ohje5 = new Ohje(rid2); ohje5.vastaaPerinteinen(rid2); 
     try {
     leivonta.lisaa(juustokakku); 
     leivonta.lisaa(juustokakku2); 
     leivonta.lisaa(ohje1); 
     leivonta.lisaa(ohje2); 
     leivonta.lisaa(ohje3); 
     leivonta.lisaa(ohje4); 
     leivonta.lisaa(ohje5); 
     } catch ( Exception e) {
        System.err.println(e.getMessage()); 
     }
   }
  // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLisaa63 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa63() throws SailoException {    // Leivonta: 63
    alustaLeivonta(); 
    assertEquals("From: Leivonta line: 66", 2, leivonta.etsi("*",0).size()); 
    leivonta.lisaa(juustokakku); 
    assertEquals("From: Leivonta line: 68", 3, leivonta.etsi("*",0).size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsi82 
   * @throws CloneNotSupportedException when error
   * @throws SailoException when error
   */
  @Test
  public void testEtsi82() throws CloneNotSupportedException, SailoException {    // Leivonta: 82
    alustaLeivonta(); 
    Resepti resepti3 = new Resepti(); resepti3.rekisteroi(); 
    resepti3.vastaaJuustokakku(); 
    leivonta.lisaa(resepti3); 
    Collection<Resepti> loytyneet = leivonta.etsi("*Juustokakku*",1); 
    assertEquals("From: Leivonta line: 89", 3, loytyneet.size()); 
    Iterator<Resepti> it = loytyneet.iterator(); 
    it.next(); 
    it.next(); 
    assertEquals("From: Leivonta line: 93", true, it.next() == resepti3); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista123 
   * @throws Exception when error
   */
  @Test
  public void testPoista123() throws Exception {    // Leivonta: 123
    alustaLeivonta(); 
    assertEquals("From: Leivonta line: 126", 2, leivonta.etsi("*",0).size()); 
    assertEquals("From: Leivonta line: 127", 2, leivonta.annaOhjeet(juustokakku).size()); 
    assertEquals("From: Leivonta line: 128", 1, leivonta.poista(juustokakku)); 
    assertEquals("From: Leivonta line: 129", 1, leivonta.etsi("*",0).size()); 
    assertEquals("From: Leivonta line: 130", 0, leivonta.annaOhjeet(juustokakku).size()); 
    assertEquals("From: Leivonta line: 131", 3, leivonta.annaOhjeet(juustokakku2).size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista145 
   * @throws Exception when error
   */
  @Test
  public void testPoista145() throws Exception {    // Leivonta: 145
    alustaLeivonta(); 
    assertEquals("From: Leivonta line: 148", 2, leivonta.annaOhjeet(juustokakku).size()); 
    leivonta.poista(ohje2); 
    assertEquals("From: Leivonta line: 150", 1, leivonta.annaOhjeet(juustokakku).size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta162 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta162() throws SailoException {    // Leivonta: 162
    Leivonta leivonta = new Leivonta(); 
    Resepti juustokakku1 = new Resepti(); 
    juustokakku1.vastaaJuustokakku(); 
    juustokakku1.rekisteroi(); 
    Resepti juustokakku2 = new Resepti(); 
    juustokakku2.vastaaJuustokakku(); 
    juustokakku2.rekisteroi(); 
    Ohje perinteinen1 = new Ohje(); 
    perinteinen1.vastaaPerinteinen(juustokakku2.getTunnusNro()); 
    Ohje perinteinen2 = new Ohje(); 
    perinteinen2.vastaaPerinteinen(juustokakku1.getTunnusNro()); 
    Ohje perinteinen3 = new Ohje(); 
    perinteinen3.vastaaPerinteinen(juustokakku2.getTunnusNro()); 
    Allergia al1 = new Allergia(); al1.vastaaPahkinaton(); 
    Allergia al2 = new Allergia(); al2.vastaaPahkinaton(); 
    Allergia al3 = new Allergia(); al3.vastaaPahkinaton(); 
    String hakemisto = "testileivontakirja"; 
    File dir = new File(hakemisto); 
    File frtied = new File(hakemisto+"/reseptit.dat"); 
    File fltied = new File(hakemisto+ "/allergiat.dat"); 
    File fotied = new File(hakemisto+ "/ohjeet.dat"); 
    dir.mkdir(); 
    frtied.delete(); 
    fotied.delete(); 
    fltied.delete(); 
    try {
    leivonta.lueTiedostosta(hakemisto); 
    fail("Leivonta: 198 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    leivonta.lisaa(juustokakku1); 
    leivonta.lisaa(juustokakku2); 
    leivonta.lisaa(perinteinen1); 
    leivonta.lisaa(perinteinen2); 
    leivonta.lisaa(perinteinen3); 
    leivonta.lisaa(al1); 
    leivonta.lisaa(al2); 
    leivonta.lisaa(al3); 
    leivonta.tallenna(); 
    leivonta = new Leivonta(); 
    leivonta.lueTiedostosta(hakemisto); 
    Collection<Resepti> kaikki = leivonta.etsi("",-1); 
    Iterator<Resepti> it = kaikki.iterator(); 
    assertEquals("From: Leivonta line: 215", juustokakku2, it.next()); 
    assertEquals("From: Leivonta line: 216", false, it.hasNext()); 
    List<Ohje> loytyneet = leivonta.annaOhjeet(juustokakku1); 
    Iterator<Ohje> io = loytyneet.iterator(); 
    assertEquals("From: Leivonta line: 220", perinteinen2, io.next()); 
    assertEquals("From: Leivonta line: 221", false, io.hasNext()); 
    loytyneet = leivonta.annaOhjeet(juustokakku2); 
    io = loytyneet.iterator(); 
    assertEquals("From: Leivonta line: 225", perinteinen1, io.next()); 
    assertEquals("From: Leivonta line: 226", perinteinen3, io.next()); 
    assertEquals("From: Leivonta line: 227", false, io.hasNext()); 
    leivonta.lisaa(juustokakku2); 
    leivonta.lisaa(perinteinen3); 
    leivonta.lisaa(al3); 
    leivonta.tallenna(); 
    assertEquals("From: Leivonta line: 234", true, frtied.delete()); 
    assertEquals("From: Leivonta line: 235", true, fotied.delete()); 
    assertEquals("From: Leivonta line: 236", true, fltied.delete()); 
    File frbak = new File(hakemisto+"/reseptit.bak"); 
    File fobak = new File(hakemisto+"/ohjeet.bak"); 
    File flbak = new File(hakemisto+"/allergiat.bak"); 
    assertEquals("From: Leivonta line: 242", true, frbak.delete()); 
    assertEquals("From: Leivonta line: 243", true, fobak.delete()); 
    assertEquals("From: Leivonta line: 244", true, flbak.delete()); 
    assertEquals("From: Leivonta line: 245", true, dir.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testAnnaOhjeet302 
   * @throws SailoException when error
   */
  @Test
  public void testAnnaOhjeet302() throws SailoException {    // Leivonta: 302
    Leivonta leivonta = new Leivonta(); 
    Resepti korvapuusti = new Resepti(), korvapuusti2 = new Resepti(), juustokakku= new Resepti(); 
    korvapuusti.rekisteroi(); korvapuusti2.rekisteroi(); juustokakku.rekisteroi(); 
    int id1 = korvapuusti.getTunnusNro(); 
    int id2 = juustokakku.getTunnusNro(); 
    Ohje perinteinen1 = new Ohje(id1); leivonta.lisaa(perinteinen1); 
    Ohje perinteinen2 = new Ohje(id2); leivonta.lisaa(perinteinen2); 
    Ohje gluteeniton = new Ohje(id1); leivonta.lisaa(gluteeniton); 
    List<Ohje> loytyneet; 
    loytyneet = leivonta.annaOhjeet(korvapuusti2); 
    assertEquals("From: Leivonta line: 318", 0, loytyneet.size()); 
    loytyneet = leivonta.annaOhjeet(juustokakku); 
    assertEquals("From: Leivonta line: 320", 1, loytyneet.size()); 
    assertEquals("From: Leivonta line: 321", true, loytyneet.get(0) == perinteinen2); 
    loytyneet = leivonta.annaOhjeet(korvapuusti); 
    assertEquals("From: Leivonta line: 323", 2, loytyneet.size()); 
    assertEquals("From: Leivonta line: 324", true, loytyneet.get(0) == perinteinen1); 
    assertEquals("From: Leivonta line: 325", true, loytyneet.get(1) == gluteeniton); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa348 
   * @throws SailoException when error
   */
  @Test
  public void testKorvaaTaiLisaa348() throws SailoException {    // Leivonta: 348
    alustaLeivonta(); 
    assertEquals("From: Leivonta line: 351", 2, leivonta.etsi("*",0).size()); 
    leivonta.korvaaTaiLisaa(juustokakku); 
    assertEquals("From: Leivonta line: 353", 2, leivonta.etsi("*",0).size()); 
  } // Generated by ComTest END
}