package leivonta.test;
// Generated by ComTest BEGIN
import java.io.File;
import leivonta.*;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2019.04.26 11:12:20 // Generated by ComTest
 *
 */
@SuppressWarnings("all")
public class OhjeetTest {



  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta52 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta52() throws SailoException {    // Ohjeet: 52
    Ohjeet ohjeet = new Ohjeet(); 
    Ohje ohje1 = new Ohje(); ohje1.vastaaPerinteinen(1); 
    Ohje ohje2 = new Ohje(); ohje2.vastaaPerinteinen(2); 
    Ohje ohje3 = new Ohje(); ohje3.vastaaPerinteinen(1); 
    Ohje ohje4 = new Ohje(); ohje4.vastaaPerinteinen(2); 
    String tiedNimi = "testileivonta"; 
    File ftied = new File(tiedNimi+".dat"); 
    ftied.delete(); 
    try {
    ohjeet.lueTiedostosta(tiedNimi); 
    fail("Ohjeet: 63 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    ohjeet.lisaa(ohje1); 
    ohjeet.lisaa(ohje2); 
    ohjeet.lisaa(ohje3); 
    ohjeet.lisaa(ohje4); 
    ohjeet.tallenna(); 
    ohjeet = new Ohjeet(); 
    ohjeet.lueTiedostosta(tiedNimi); 
    Iterator<Ohje> i = ohjeet.iterator(); 
    assertEquals("From: Ohjeet line: 72", ohje1.toString(), i.next().toString()); 
    assertEquals("From: Ohjeet line: 73", ohje2.toString(), i.next().toString()); 
    assertEquals("From: Ohjeet line: 74", ohje3.toString(), i.next().toString()); 
    assertEquals("From: Ohjeet line: 75", ohje4.toString(), i.next().toString()); 
    assertEquals("From: Ohjeet line: 76", false, i.hasNext()); 
    ohjeet.lisaa(ohje1); 
    ohjeet.tallenna(); 
    assertEquals("From: Ohjeet line: 79", true, ftied.delete()); 
    File fbak = new File(tiedNimi+".bak"); 
    assertEquals("From: Ohjeet line: 81", true, fbak.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testIterator180 */
  @Test
  public void testIterator180() {    // Ohjeet: 180
    Ohjeet ohjeet = new Ohjeet(); 
    Ohje perinteinen1 = new Ohje(1); ohjeet.lisaa(perinteinen1); 
    Ohje perinteinen2 = new Ohje(2); ohjeet.lisaa(perinteinen2); 
    Ohje gluteeniton = new Ohje(1); ohjeet.lisaa(gluteeniton); 
    Iterator<Ohje> i2 = ohjeet.iterator(); 
    assertEquals("From: Ohjeet line: 190", perinteinen1, i2.next()); 
    assertEquals("From: Ohjeet line: 191", perinteinen2, i2.next()); 
    assertEquals("From: Ohjeet line: 192", gluteeniton, i2.next()); 
    try {
    assertEquals("From: Ohjeet line: 193", gluteeniton, i2.next()); 
    fail("Ohjeet: 193 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
    int n = 0; 
    int[] rnrot = { 1,2,1} ; 
    for(Ohje oh:ohjeet){
    assertEquals("From: Ohjeet line: 199", rnrot[n], oh.getReseptiNro()); n++; 
    }
    assertEquals("From: Ohjeet line: 202", 3, n); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaOhjeet215 */
  @Test
  public void testAnnaOhjeet215() {    // Ohjeet: 215
    Ohjeet ohjeet = new Ohjeet(); 
    Ohje perinteinen1 = new Ohje(1); ohjeet.lisaa(perinteinen1); 
    Ohje perinteinen2 = new Ohje(2); ohjeet.lisaa(perinteinen2); 
    Ohje gluteeniton = new Ohje(1); ohjeet.lisaa(gluteeniton); 
    List<Ohje> loytyneet; 
    loytyneet = ohjeet.annaOhjeet(3); 
    assertEquals("From: Ohjeet line: 224", 0, loytyneet.size()); 
    loytyneet = ohjeet.annaOhjeet(2); 
    assertEquals("From: Ohjeet line: 226", 1, loytyneet.size()); 
    assertEquals("From: Ohjeet line: 227", true, loytyneet.get(0) == perinteinen2); 
    loytyneet = ohjeet.annaOhjeet(1); 
    assertEquals("From: Ohjeet line: 229", 2, loytyneet.size()); 
    assertEquals("From: Ohjeet line: 230", true, loytyneet.get(0) == perinteinen1); 
    assertEquals("From: Ohjeet line: 231", true, loytyneet.get(1) == gluteeniton); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa248 
   * @throws SailoException when error
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testKorvaaTaiLisaa248() throws SailoException,CloneNotSupportedException {    // Ohjeet: 248
    Ohjeet ohjeet = new Ohjeet(); 
    Ohje ohje1 = new Ohje(), ohje2 = new Ohje(); 
    ohje1.rekisteroi(); ohje2.rekisteroi(); 
    assertEquals("From: Ohjeet line: 255", 0, ohjeet.getLkm()); 
    ohjeet.korvaaTaiLisaa(ohje1); assertEquals("From: Ohjeet line: 256", 1, ohjeet.getLkm()); 
    ohjeet.korvaaTaiLisaa(ohje2); assertEquals("From: Ohjeet line: 257", 2, ohjeet.getLkm()); 
    Ohje ohje3 = ohje1.clone(); 
    Iterator<Ohje> i2=ohjeet.iterator(); 
    assertEquals("From: Ohjeet line: 262", ohje1, i2.next()); 
    ohjeet.korvaaTaiLisaa(ohje3); assertEquals("From: Ohjeet line: 263", 2, ohjeet.getLkm()); 
    i2=ohjeet.iterator(); 
    Ohje h = i2.next(); 
    assertEquals("From: Ohjeet line: 266", ohje3, h); 
    assertEquals("From: Ohjeet line: 267", true, h == ohje3); 
    assertEquals("From: Ohjeet line: 268", false, h == ohje1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testPoistaReseptinOhjeet288 */
  @Test
  public void testPoistaReseptinOhjeet288() {    // Ohjeet: 288
    Ohjeet ohjeet = new Ohjeet(); 
    Ohje ohje1 = new Ohje (); ohje1.vastaaPerinteinen(1); 
    Ohje ohje2 = new Ohje (); ohje2.vastaaPerinteinen(1); 
    Ohje ohje3 = new Ohje (); ohje3.vastaaPerinteinen(2); 
    Ohje ohje4 = new Ohje (); ohje4.vastaaPerinteinen(3); 
    ohjeet.lisaa(ohje1); 
    ohjeet.lisaa(ohje2); 
    ohjeet.lisaa(ohje3); 
    ohjeet.lisaa(ohje4); 
    assertEquals("From: Ohjeet line: 299", 2, ohjeet.poistaReseptinOhjeet(1)); assertEquals("From: Ohjeet line: 299", 2, ohjeet.getLkm()); 
    assertEquals("From: Ohjeet line: 300", 0, ohjeet.poistaReseptinOhjeet(4)); assertEquals("From: Ohjeet line: 300", 2, ohjeet.getLkm()); 
    List<Ohje> h = ohjeet.annaOhjeet(1); 
    assertEquals("From: Ohjeet line: 302", 0, h.size()); 
    h = ohjeet.annaOhjeet(2); 
    assertEquals("From: Ohjeet line: 304", ohje3, h.get(0)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista325 
   * @throws SailoException when error
   */
  @Test
  public void testPoista325() throws SailoException {    // Ohjeet: 325
    Ohjeet ohjeet = new Ohjeet(); 
    Ohje ohje1 = new Ohje (); ohje1.vastaaPerinteinen(1); 
    Ohje ohje2 = new Ohje (); ohje2.vastaaPerinteinen(1); 
    Ohje ohje3 = new Ohje (); ohje3.vastaaPerinteinen(2); 
    Ohje ohje4 = new Ohje (); ohje4.vastaaPerinteinen(3); 
    Ohje ohje5 = new Ohje (); ohje5.vastaaPerinteinen(4); 
    ohjeet.lisaa(ohje1); 
    ohjeet.lisaa(ohje2); 
    ohjeet.lisaa(ohje3); 
    ohjeet.lisaa(ohje4); 
    assertEquals("From: Ohjeet line: 339", false, ohjeet.poista(ohje5)); assertEquals("From: Ohjeet line: 339", 4, ohjeet.getLkm()); 
    assertEquals("From: Ohjeet line: 340", true, ohjeet.poista(ohje1)); assertEquals("From: Ohjeet line: 340", 3, ohjeet.getLkm()); 
    List<Ohje> h = ohjeet.annaOhjeet(1); 
    assertEquals("From: Ohjeet line: 342", 1, h.size()); 
    assertEquals("From: Ohjeet line: 343", ohje2, h.get(0)); 
  } // Generated by ComTest END
}